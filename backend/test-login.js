const http = require('http');

function makeRequest(options, data = null) {
  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => body += chunk);
      res.on('end', () => {
        try {
          const parsed = JSON.parse(body);
          resolve({ statusCode: res.statusCode, data: parsed });
        } catch (e) {
          resolve({ statusCode: res.statusCode, data: body });
        }
      });
    });
    
    req.on('error', reject);
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    req.end();
  });
}

async function testLogin() {
  try {
    console.log('üîê –¢–µ—Å—Ç—É—î–º–æ –≤—Ö—ñ–¥ –≤ —Å–∏—Å—Ç–µ–º—É...');
    
    const loginOptions = {
      hostname: 'localhost',
      port: 3000,
      path: '/api/auth/login',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    };
    
    const loginData = {
      email: 'gorodok048@gmail.com',
      password: 'Qa123456'
    };
    
    const response = await makeRequest(loginOptions, loginData);
    
    if (response.statusCode === 200) {
      console.log('‚úÖ –í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π!');
      console.log('üìÑ –í—ñ–¥–ø–æ–≤—ñ–¥—å:', response.data);
      console.log('üîë –¢–æ–∫–µ–Ω:', response.data.token);
      
      // –¢–µ—Å—Ç—É—î–º–æ –∑–∞–ø–∏—Ç –∫–≤—ñ–∑—ñ–≤ –∑ —Ç–æ–∫–µ–Ω–æ–º
      console.log('\nüß™ –¢–µ—Å—Ç—É—î–º–æ –∑–∞–ø–∏—Ç –∫–≤—ñ–∑—ñ–≤ –∑ —Ç–æ–∫–µ–Ω–æ–º...');
      const quizzesOptions = {
        hostname: 'localhost',
        port: 3000,
        path: '/api/quizzes?category=' + encodeURIComponent('–ì–µ–æ–≥—Ä–∞—Ñ—ñ—è'),
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${response.data.token}`
        }
      };
      
      const quizzesResponse = await makeRequest(quizzesOptions);
      
      if (quizzesResponse.statusCode === 200) {
        console.log('‚úÖ –ö–≤—ñ–∑–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
        console.log('üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤—ñ–∑—ñ–≤:', quizzesResponse.data.length);
      } else {
        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–≤—ñ–∑—ñ–≤:', quizzesResponse.statusCode, quizzesResponse.data);
      }
    } else {
      console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É:', response.statusCode, response.data);
    }
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error.message);
  }
}

testLogin();