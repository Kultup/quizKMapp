import 'package:flutter/foundation.dart' hide Category;
import '../models/category.dart';
import '../models/quiz.dart';
import '../models/question.dart';
import '../models/quiz_result.dart';
import '../services/api_service.dart';
import '../services/logging_service.dart';

class QuizProvider with ChangeNotifier {
  final ApiService _apiService = ApiService();
  
  List<Category> _categories = [];
  List<Quiz> _quizzes = [];
  List<Question> _currentQuizQuestions = [];
  Quiz? _currentQuiz;
  List<QuizResult> _userResults = [];
  
  bool _isLoading = false;
  String? _error;

  // Getters
  List<Category> get categories => _categories;
  List<Quiz> get quizzes => _quizzes;
  List<Question> get currentQuizQuestions => _currentQuizQuestions;
  Quiz? get currentQuiz => _currentQuiz;
  List<QuizResult> get userResults => _userResults;
  List<QuizResult> get results => _userResults; // Alias for userResults
  bool get isLoading => _isLoading;
  String? get error => _error;

  // Load categories
  Future<void> loadCategories() async {
    print('üîÑ QuizProvider: –ü–æ—á–∞—Ç–æ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π');
    _setLoading(true);
    _clearError();

    LoggingService.instance.userAction('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π');

    try {
      print('üåê QuizProvider: –í–∏–∫–ª–∏–∫–∞—î–º–æ API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π');
      _categories = await _apiService.getCategories();
      print('‚úÖ QuizProvider: –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ. –ö—ñ–ª—å–∫—ñ—Å—Ç—å: ${_categories.length}');
      LoggingService.instance.info('–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ', null, null);
      _setLoading(false);
    } catch (e) {
      print('‚ùå QuizProvider: –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: $e');
      LoggingService.instance.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π', e);
      _setError(e.toString());
      _setLoading(false);
    }
  }

  // Load quizzes
  Future<void> loadQuizzes({String? categoryName}) async {
    _setLoading(true);
    _clearError();

    LoggingService.instance.userAction('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–≤—ñ–∑—ñ–≤', details: {
      'categoryName': categoryName ?? '–≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó'
    });

    try {
      _quizzes = await _apiService.getQuizzes(categoryName: categoryName);
      LoggingService.instance.info('–ö–≤—ñ–∑–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ', null, null);
      _setLoading(false);
    } catch (e) {
      LoggingService.instance.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–≤—ñ–∑—ñ–≤', e);
      _setError(e.toString());
      _setLoading(false);
    }
  }

  // Load quiz with questions
  Future<void> loadQuizWithQuestions(String quizId) async {
    _setLoading(true);
    _clearError();

    LoggingService.instance.quiz('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–≤—ñ–∑—É –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏', quizId: quizId);

    try {
      LoggingService.instance.quiz('üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –∫–≤—ñ–∑—É...', quizId: quizId);
      _currentQuiz = await _apiService.getQuizById(quizId);
      LoggingService.instance.quiz('‚úÖ –î–µ—Ç–∞–ª—ñ –∫–≤—ñ–∑—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ', quizId: quizId);
      
      LoggingService.instance.quiz('üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è –∫–≤—ñ–∑—É...', quizId: quizId);
      _currentQuizQuestions = await _apiService.getQuizQuestions(quizId);
      LoggingService.instance.quiz('‚úÖ –ü–∏—Ç–∞–Ω–Ω—è –∫–≤—ñ–∑—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ', quizId: quizId, details: {
        'questionsCount': _currentQuizQuestions.length
      });
      
      LoggingService.instance.quiz('–ö–≤—ñ–∑ –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ', quizId: quizId, details: {
        'questionsCount': _currentQuizQuestions.length
      });
      _setLoading(false);
    } catch (e) {
      LoggingService.instance.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–≤—ñ–∑—É –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏', e);
      _setError(e.toString());
      _setLoading(false);
    }
  }

  // Load quizzes by category (alias for loadQuizzes)
  Future<void> loadQuizzesByCategory(String categoryName) async {
    await loadQuizzes(categoryName: categoryName);
  }

  // Load quiz questions (alias for loadQuizWithQuestions)
  Future<void> loadQuizQuestions(String quizId) async {
    await loadQuizWithQuestions(quizId);
  }

  // Submit quiz result
  Future<QuizResult?> submitQuizResult({
    required String quizId,
    required List<Map<String, dynamic>> answers,
    int? timeTaken,
    bool isDailyQuiz = false,
  }) async {
    _setLoading(true);
    _clearError();

    LoggingService.instance.quiz('–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –∫–≤—ñ–∑—É', quizId: quizId, details: {
      'answersCount': answers.length,
    });

    try {
      // Get current quiz details
      final quiz = _currentQuiz ?? _quizzes.firstWhere((q) => q.id == quizId, orElse: () => Quiz(
        id: quizId,
        title: '–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–≤—ñ–∑',
        description: '',
        categoryId: '',
        category: '',
        difficulty: 'medium',
        questionsCount: 0,
        estimatedTime: 0,
        createdAt: DateTime.now(),
        questions: const [],
      ));

      final result = await _apiService.submitQuizResult(
        quizId: quizId,
        quizTitle: quiz.title,
        categoryId: quiz.categoryId,
        categoryName: quiz.category,
        answers: answers,
        timeTaken: timeTaken ?? 0,
        isDailyQuiz: isDailyQuiz,
      );
      
      _userResults.insert(0, result); // Add to beginning of list
      LoggingService.instance.quiz('–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–≤—ñ–∑—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ', quizId: quizId, details: {
        'resultId': result.id.toString(),
        'totalPoints': result.totalPoints,
        'correctAnswers': result.correctAnswers,
        'incorrectAnswers': result.incorrectAnswers,
        'accuracy': result.accuracy,
      });
      _setLoading(false);
      return result;
    } catch (e) {
      LoggingService.instance.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –∫–≤—ñ–∑—É', e);
      _setError(e.toString());
      _setLoading(false);
      return null;
    }
  }

  // Load user results
  Future<void> loadUserResults() async {
    _setLoading(true);
    _clearError();

    LoggingService.instance.userAction('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');

    try {
      _userResults = await _apiService.getUserResults();
      LoggingService.instance.info('–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ', null, null);
      _setLoading(false);
    } catch (e) {
      LoggingService.instance.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', e);
      _setError(e.toString());
      _setLoading(false);
    }
  }

  // Clear current quiz
  void clearCurrentQuiz() {
    _currentQuiz = null;
    _currentQuizQuestions = [];
    notifyListeners();
  }

  void _setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }

  void _setError(String error) {
    _error = error;
    notifyListeners();
  }

  void _clearError() {
    _error = null;
    notifyListeners();
  }
}